{
  "version": 3,
  "sources": ["events.ts"],
  "sourcesContent": ["import { type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nexport type EventRegistration = Partial<{\n  [name in keyof GlobalEventHandlersEventMap]: (event: GlobalEventHandlersEventMap[name]) => void | Promise<void>;\n}>;\n\nexport class EventsController implements ReactiveController {\n  #events?: EventRegistration;\n  #host: ReactiveControllerHost & HTMLElement;\n  #listeners: Array<() => void | Promise<void>> = [];\n\n  constructor(host: ReactiveControllerHost & HTMLElement, events?: EventRegistration) {\n    this.#host = host;\n    this.#host.addController(this);\n    this.#events = events;\n  }\n\n  hostConnected(): void {\n    Object.entries(this.#events ?? {}).forEach(([name, listener]) => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.listen<any>(this.#host, name, listener);\n    });\n  }\n\n  hostDisconnected(): void {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises, @typescript-eslint/promise-function-async\n    this.#listeners.forEach(cb => cb());\n    this.#listeners = [];\n  }\n\n  listen<K extends keyof WindowEventMap>(\n    window: Window,\n    type: K,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (this: Window, ev: WindowEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  listen<K extends keyof DocumentEventMap>(\n    document: Document,\n    type: K,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  listen<K extends keyof HTMLElementEventMap>(\n    element: HTMLElement,\n    type: K,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  listen<K extends keyof ShadowRootEventMap>(\n    element: ShadowRoot,\n    type: K,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  listen<K extends keyof MediaQueryListEventMap>(\n    element: MediaQueryList,\n    type: K,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (this: ShadowRoot, ev: MediaQueryListEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  listen<K extends keyof GlobalEventHandlersEventMap>(\n    element: Element,\n    type: K,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (this: Element, ev: GlobalEventHandlersEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n\n  listen(\n    element: Window | Document | Element | HTMLElement | ShadowRoot | MediaQueryList,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void {\n    const callback = (event: Event): void => {\n      if (typeof listener === 'function') {\n        listener.call(this.#host, event);\n      } else {\n        listener.handleEvent.call(this.#host, event);\n      }\n    };\n\n    element.addEventListener(type, callback, options);\n    this.#listeners.push(() => element.removeEventListener(type, callback, options));\n  }\n}\n"],
  "mappings": ";AAMO,aAAM,iBAA+C;AAAA,EAC1D;AAAA,EACA;AAAA,EACA,aAAgD,CAAC;AAAA,EAEjD,YAAY,MAA4C,QAA4B;AAClF,SAAK,QAAQ;AACb,SAAK,MAAM,cAAc,IAAI;AAC7B,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,gBAAsB;AACpB,WAAO,QAAQ,KAAK,WAAW,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,MAAM,QAAQ,MAAM;AAE/D,WAAK,OAAY,KAAK,OAAO,MAAM,QAAQ;AAAA,IAC7C,CAAC;AAAA,EACH;AAAA,EAEA,mBAAyB;AAEvB,SAAK,WAAW,QAAQ,QAAM,GAAG,CAAC;AAClC,SAAK,aAAa,CAAC;AAAA,EACrB;AAAA,EAkDA,OACE,SACA,MACA,UACA,SACM;AACN,UAAM,WAAW,CAAC,UAAuB;AACvC,UAAI,OAAO,aAAa,YAAY;AAClC,iBAAS,KAAK,KAAK,OAAO,KAAK;AAAA,MACjC,OAAO;AACL,iBAAS,YAAY,KAAK,KAAK,OAAO,KAAK;AAAA,MAC7C;AAAA,IACF;AAEA,YAAQ,iBAAiB,MAAM,UAAU,OAAO;AAChD,SAAK,WAAW,KAAK,MAAM,QAAQ,oBAAoB,MAAM,UAAU,OAAO,CAAC;AAAA,EACjF;AACF;",
  "names": []
}
